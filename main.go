package main

import (
	"fmt"
	"log"
	"net/http"

	"github.com/awalker125/go-api/handlers/cars"
	"github.com/awalker125/go-api/handlers/home"
	"github.com/awalker125/go-api/middleware"
	"github.com/awalker125/go-api/store"

	_ "github.com/awalker125/go-api/docs" // docs is generated by Swag CLI, you have to import it.

	httpSwagger "github.com/swaggo/http-swagger/v2"
)

func Hello(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, "hello world")
}

// @title           Example Cars API
// @version         1.0
// @description     This is a sample server celler server.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /api/v1

// @securityDefinitions.basic  BasicAuth

// @externalDocs.description  OpenAPI
// @externalDocs.url          https://swagger.io/resources/open-api/

func main() {

	mux := http.NewServeMux()

	mux.Handle("/swagger/", httpSwagger.Handler(
		httpSwagger.URL("/swagger/doc.json"),                        // The url pointing to API definition
		httpSwagger.DefaultModelsExpandDepth(httpSwagger.HideModel), // Models will not be expanded
	))

	mux.HandleFunc("/", middleware.Chain(home.HomeHandler, middleware.Method("GET"), middleware.Logging()))

	s := store.NewMemStore()

	h := cars.NewCarsHandler(s)

	// h := cars.CarsHandler{Make: "ford", }
	mux.HandleFunc("/cars", middleware.Chain(h.ServeHTTP, middleware.Logging()))
	mux.HandleFunc("/cars/", middleware.Chain(h.ServeHTTP, middleware.Logging()))

	// handler := person.PersonHandler{Name: "bob"}
	// handler.Name = "bill"

	// chain1 := middleware.Chain(handler.ServeHTTP, middleware.Method("GET"), middleware.Logging())
	// chain2 := middleware.Chain(person.Hello2, middleware.Method("GET"), middleware.Logging())
	// chain3 := middleware.Chain(person.TimeHandler(time.RFC1123).ServeHTTP, middleware.Method("GET"), middleware.Logging())
	// chain4 := middleware.Chain(person.TimeHandler2(time.RFC1123), middleware.Method("GET"), middleware.Logging())
	// chain5 := middleware.Chain(person.TimeHandler3(time.RFC1123), middleware.Method("GET"), middleware.Logging())
	// mux.Handle("/person", chain1)
	// mux.Handle("/person2", chain2)
	// mux.Handle("/time", chain3)
	// mux.Handle("/time2", chain4)
	// mux.Handle("/time3", chain5)
	log.Println("Starting server on 8080...")
	http.ListenAndServe(":8080", mux)
}
